// Spark Streaming Twitter //

package com.suraj.practise.program

import org.apache.spark.streaming.{Seconds, StreamingContext}
import org.apache.spark.SparkContext._
import org.apache.spark.streaming.twitter._
import org.apache.spark.SparkConf


object TwitterPopularTags {
  def main(args: Array[String]){
println("hello")

if(args.length < 4){
System.err.println{"Usage: TwitterPopularTags <consumer Key> <consumer secret>" +
"<access token> <access token secret> [<filters>]" }
System.exit(1)
}

StreamingExamples.setStreamingLogLevels()

val Array(consumerKey, consumerSecret, accessToken, accessTokenSecret) = args.take(4) 
val filters = args.takeRight(args.length - 4)

System.setProperty("twitter4j.oauth.consumerKey", consumerKey)
System.setProperty("twitter4j.oauth.consumerSecret", consumerSecret)
System.setProperty("twitter4j.oauth.accessToken", accessToken)
System.setProperty("twitter4j.oauth.accessTokenSecret", accessTokenSecret)

val sparkConf = new SparkConf().setAppName("TwitterPopularTags").setMaster("local[2]")
val ssc = new StreamingContext(sparkConf, Seconds(2))
val stream = TwitterUtils.createStream(ssc, None, filters)

val hashtags = stream.flatMap(status => status.getText.split(" ").filter(_.startsWith("#")))

val topCounts60 = hashtags.map((_,3)).reduceByKeyAndWindow(_+_, Seconds(60))
                  .map{case (topic, count)=> (count, topic)}
                  .transform(_.sortByKey(false))  

val topCounts10 = hashtags.map((_,3)).reduceByKeyAndWindow(_+_, Seconds(10))
                  .map{case (topic, count)=> (count, topic)}
                  .transform(_.sortByKey(false)) 
 
// Printing popular Hash tags
topCounts60.foreachRDD(rdd => {
val topList = rdd.take(10)
println("\nPopular Topics in last 60 seconds (%s total):".format(rdd.count()))
topList.foreach{case(count,tag) => println("%s (%s tweets)".format(tag, count))}
})                  

topCounts10.foreachRDD(rdd => {
val topList = rdd.take(10)
println("\nPopular Topics in last 60 seconds (%s total):".format(rdd.count()))
topList.foreach{case(count,tag) => println("%s (%s tweets)".format(tag, count))}
})                  
ssc.start()
ssc.awaitTermination()

}}